// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  avatarUrl        String?
  password         String?
  role             UserRole         @default(USER)
  subscriptionTier SubscriptionTier @default(FREE)
  isEmailVerified  Boolean          @default(false)
  lastActiveAt     DateTime?
  preferences      Json             @default("{}")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  ownedProjects  Project[]       @relation("ProjectOwner")
  memberProjects ProjectMember[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  createdTasks   Task[]          @relation("TaskCreator")
  comments       Comment[]
  activities     Activity[]
  notifications  Notification[]
  uploadedFiles  File[]          @relation("FileUploader")

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  color       String?       @default("#3B82F6")
  isPublic    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId    String
  owner      User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members    ProjectMember[]
  tasks      Task[]
  activities Activity[]
  files      File[]

  @@map("projects")
}

model ProjectMember {
  id       String   @id @default(cuid())
  role     UserRole @default(USER)
  joinedAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Decimal?     @db.Decimal(5, 2)
  actualHours    Decimal?     @db.Decimal(5, 2)
  tags           String[]
  metadata       Json         @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  projectId  String
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId String?
  assignee   User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId  String
  creator    User       @relation("TaskCreator", fields: [creatorId], references: [id])
  comments   Comment[]
  activities Activity[]
  files      File[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model File {
  id           String   @id @default(cuid())
  filename     String   @unique
  originalName String
  mimeType     String
  size         Int
  path         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploadedBy     String
  uploadedByUser User     @relation("FileUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)
  taskId         String?
  task           Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  data      Json
  createdAt DateTime @default(now())

  // Relations
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("activities")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json     @default("{}")
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

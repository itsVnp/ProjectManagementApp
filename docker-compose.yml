version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claro-postgres
    environment:
      POSTGRES_DB: claro_dev
      POSTGRES_USER: claro_user
      POSTGRES_PASSWORD: claro_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    networks:
      - claro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claro_user -d claro_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - claro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: claro-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://claro_user:claro_password@postgres:5432/claro_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-jwt-secret-key-here
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: claro-web
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - claro-network

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: claro-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - claro-network

  # MinIO for File Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: claro-minio
    environment:
      MINIO_ROOT_USER: claro_user
      MINIO_ROOT_PASSWORD: claro_password
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - claro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: claro-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - claro-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch Management (Optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: claro-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - claro-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: claro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web
    networks:
      - claro-network

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: claro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - claro-network

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: claro-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: claro_password
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - claro-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 